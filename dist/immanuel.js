(()=>{"use strict";eval("\n// UNUSED EXPORTS: default\n\n// CONCATENATED MODULE: ./src/options.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar options_Options = /*#__PURE__*/function () {\n  function Options() {\n    _classCallCheck(this, Options);\n  }\n\n  _createClass(Options, null, [{\n    key: \"create\",\n    value: function create(options) {\n      return _objectSpread(_objectSpread({}, this.defaults), options);\n    }\n  }]);\n\n  return Options;\n}();\n\noptions_Options.defaults = {\n  rotateToHorizon: true,\n  rotateSigns: true,\n  rotateHouseNumbers: false,\n  rotateAngleText: false,\n  angleFormat: '%D&deg;%M\\'',\n  lineOrder: ['houses', 'angleMarkers', 'anglePointers', 'aspects'],\n  aspectOrder: ['trine', 'sextile', 'semisextile', 'square', 'semisquare', 'sesquisquare', 'opposite', 'quintile', 'semiquintile', 'sesquiquintile', 'biquintile', 'quincunx']\n};\n\n// CONCATENATED MODULE: ./src/elements.js\nfunction elements_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction elements_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction elements_createClass(Constructor, protoProps, staticProps) { if (protoProps) elements_defineProperties(Constructor.prototype, protoProps); if (staticProps) elements_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar elements_Elements = /*#__PURE__*/function () {\n  elements_createClass(Elements, null, [{\n    key: \"create\",\n    value: function create(selector) {\n      return this.instance || (this.instance = new this(selector));\n    }\n  }]);\n\n  function Elements(selector) {\n    elements_classCallCheck(this, Elements);\n\n    // Main chart container\n    this.chart = document.querySelector(selector);\n\n    if (!this.chart) {\n      return false;\n    } // Container, boundaries & tracks provided by the user\n\n\n    this.chartSvgContainer = this.chart.querySelector('[data-immanuel-lines]');\n    this.chartBackground = this.chart.querySelector('[data-immanuel-background]');\n    this.angleTrack = this.chart.querySelector('[data-immanuel-track=\"angles\"]');\n    this.signTrack = this.chart.querySelector('[data-immanuel-track=\"signs\"]');\n    this.planetTrack = this.chart.querySelector('[data-immanuel-track=\"planets\"]');\n    this.angleTextTrack = this.chart.querySelector('[data-immanuel-track=\"angle-text\"]');\n    this.houseNumberTrack = this.chart.querySelector('[data-immanuel-track=\"house-numbers\"]');\n    this.houseStartBoundary = this.chart.querySelector('[data-immanuel-boundary=\"house-start\"]');\n    this.houseEndBoundary = this.chart.querySelector('[data-immanuel-boundary=\"house-end\"]');\n    this.angleMarkersStartBoundary = this.chart.querySelector('[data-immanuel-boundary=\"angle-markers-start\"]');\n    this.angleMarkersEndBoundary = this.chart.querySelector('[data-immanuel-boundary=\"angle-markers-end\"]');\n    this.aspectEndBoundary = this.chart.querySelector('[data-immanuel-boundary=\"aspect-end\"]'); // Chart elements provided by users\n\n    this.angles = this.chart.querySelectorAll('[data-immanuel-angle]');\n    this.signs = this.chart.querySelectorAll('[data-immanuel-sign]');\n    this.planets = this.chart.querySelectorAll('[data-immanuel-planet]');\n    this.placeholders = this.chart.querySelectorAll('[data-immanuel-placeholder]'); // Create extra elements the chart will need\n\n    this.chartLines = [];\n    this.houseNumbers = [];\n    this.angleText = {};\n\n    if (this.houseNumberTrack) {\n      this.createHouseNumberElements();\n    }\n\n    if (this.angleTextTrack) {\n      this.createAngleTextElements();\n    }\n\n    if (this.markerTrack) {\n      this.createInnerMarkerTrackElement();\n    }\n\n    this.createSvgElement();\n  } // SVG element for drawing lines\n\n\n  elements_createClass(Elements, [{\n    key: \"createSvgElement\",\n    value: function createSvgElement() {\n      this.chartSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      this.chartSvg.setAttributeNS(null, 'width', '100%');\n      this.chartSvg.setAttributeNS(null, 'height', '100%');\n      Object.assign(this.chartSvg.style, {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      });\n\n      if (this.chartSvgContainer) {\n        this.chartSvgContainer.appendChild(this.chartSvg);\n      } else {\n        this.chart.appendChild(this.chartSvg);\n      }\n    } // Set up house numbers\n\n  }, {\n    key: \"createHouseNumberElements\",\n    value: function createHouseNumberElements() {\n      for (var i = 1; i <= 12; ++i) {\n        var houseNumberElement = document.createElement('span');\n        houseNumberElement.textContent = i;\n        houseNumberElement.style.position = 'absolute';\n        houseNumberElement.classList.add('immanuel__house-number', \"house-number--\".concat(i));\n        this.houseNumbers[i] = houseNumberElement;\n        this.chart.appendChild(houseNumberElement);\n      }\n    } // Create elements to display each planet's angle\n\n  }, {\n    key: \"createAngleTextElements\",\n    value: function createAngleTextElements() {\n      var _this = this;\n\n      this.planets.forEach(function (planetElement) {\n        var planetName = planetElement.getAttribute('data-immanuel-planet');\n        var planetClassName = planetName.replace(' ', '-');\n        var angleTextElement = document.createElement('div');\n        angleTextElement.classList.add('immanuel__angle-text', \"angle-text--\".concat(planetClassName));\n        angleTextElement.style.position = 'absolute';\n        _this.angleText[planetName] = angleTextElement;\n\n        _this.chart.appendChild(angleTextElement);\n      });\n    }\n  }]);\n\n  return Elements;\n}();\n\nelements_Elements.instance = null;\n\n// CONCATENATED MODULE: ./src/chart.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction chart_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction chart_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction chart_createClass(Constructor, protoProps, staticProps) { if (protoProps) chart_defineProperties(Constructor.prototype, protoProps); if (staticProps) chart_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar chart_Chart = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  chart_createClass(Chart, null, [{\n    key: \"create\",\n    value: function create(elements, options, chartData) {\n      return new this(elements, options, chartData);\n    }\n  }]);\n\n  function Chart(elements, options, chartData) {\n    chart_classCallCheck(this, Chart);\n\n    this.elements = elements;\n    this.options = options;\n    this.chartData = chartData;\n    this.offsetAngle = 0;\n    this.planets = {};\n    this.aspectedPlanets = [];\n    this.init();\n  } // Set things up ready for drawing the chart.\n\n\n  chart_createClass(Chart, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      // Collate all wanted planets regardless of type into the same map for simplicity\n      this.elements.planets.forEach(function (planetElement) {\n        var planetName = planetElement.getAttribute('data-immanuel-planet'); // Find it\n\n        if (planetName in _this.chartData.points) {\n          var planet = _this.chartData.points[planetName];\n        } else if (planetName in _this.chartData.planets) {\n          var planet = _this.chartData.planets[planetName];\n        } // Store it\n\n\n        _this.planets[planetName] = planet; // Store which aspects we want to draw\n\n        if (!planetElement.hasAttribute('data-immanuel-no-aspects')) {\n          _this.aspectedPlanets.push(planetName);\n        }\n      }); // Ensure everything is redrawn on resize\n\n      window.addEventListener('resize', function () {\n        document.querySelectorAll('[data-immanuel-hide]').length || _this.setupChart();\n      });\n    } // Set up the chart elements & display them.\n\n  }, {\n    key: \"display\",\n    value: function display() {\n      var _this2 = this;\n\n      // Only attempt to set up display if all elements are loaded\n      if (document.readyState !== 'complete') {\n        window.addEventListener('load', function () {\n          _this2.display();\n        });\n        return;\n      }\n\n      this.setOffsetAngle();\n      this.rotateChart();\n\n      if (this.elements.placeholders) {\n        this.setPlaceholderData();\n      }\n\n      this.setupChart(); // Now unhide it\n\n      document.querySelectorAll('[data-immanuel-hide]').forEach(function (element) {\n        element.removeAttribute('data-immanuel-hide');\n      });\n    } // Calculate the offset for all subsequent angles based on rotating the chart to the horizon line.\n\n  }, {\n    key: \"setOffsetAngle\",\n    value: function setOffsetAngle() {\n      this.offsetAngle = this.options.rotateToHorizon ? this.chartData.angles.asc.chartAngle - 180 : 0;\n    } // Rotate the chart visual to the horizon line.\n\n  }, {\n    key: \"rotateChart\",\n    value: function rotateChart() {\n      this.elements.chartBackground.style.transform = this.offsetAngle > 0 ? \"rotate(\".concat(this.offsetAngle, \"deg)\") : 'none';\n    } // If any placeholders exist for available data, populate them.\n\n  }, {\n    key: \"setPlaceholderData\",\n    value: function setPlaceholderData() {\n      var _this3 = this;\n\n      this.elements.placeholders.forEach(function (placeholderElement) {\n        var angleType = placeholderElement.getAttribute('data-immanuel-placeholder');\n\n        switch (angleType) {\n          case 'asc':\n          case 'desc':\n          case 'mc':\n          case 'ic':\n            placeholderElement.innerHTML = Utils.formatAngleString(_this3.chartData.angles[angleType].formattedSignAngle, _this3.options.angleFormat);\n            break;\n        }\n      });\n    } // Set up all the chart's dynamic elements.\n\n  }, {\n    key: \"setupChart\",\n    value: function setupChart() {\n      // Set up HTML elements\n      if (this.elements.angleTrack && this.elements.angles) {\n        this.setAngles();\n      }\n\n      if (this.elements.signTrack && this.elements.signs) {\n        this.setSigns();\n      }\n\n      if (this.elements.planetTrack && this.elements.planets) {\n        this.setPlanets();\n      } // Refresh all drawn lines - this must be called after setPlanets()\n      // since the angle marker lines need the corrected position of each planet.\n\n\n      this.removeLines();\n      this.drawLines();\n    } // Remove chart lines for redrawing.\n\n  }, {\n    key: \"removeLines\",\n    value: function removeLines() {\n      this.elements.chartLines.forEach(function (chartLine) {\n        chartLine.remove();\n      });\n    } // Draw all SVG lines in the requested order.\n\n  }, {\n    key: \"drawLines\",\n    value: function drawLines() {\n      var _this4 = this;\n\n      this.options.lineOrder.reverse().forEach(function (lineType) {\n        switch (lineType) {\n          case 'angleMarkers':\n            if (_this4.elements.angleMarkersStartBoundary && _this4.elements.angleMarkersEndBoundary) {\n              _this4.setPlanetAngleMarkers();\n            }\n\n            break;\n\n          case 'anglePointers':\n            if (_this4.elements.angleMarkersStartBoundary) {\n              _this4.setPlanetAnglePointers();\n            }\n\n            break;\n\n          case 'houses':\n            if (_this4.elements.houseStartBoundary && _this4.elements.houseEndBoundary) {\n              _this4.setHouses();\n\n              if (_this4.elements.houseNumberTrack) {\n                _this4.setHouseNumbers();\n              }\n            }\n\n            break;\n\n          case 'aspects':\n            _this4.setAspects();\n\n            break;\n        }\n      });\n    } // Position the ASC / MC etc. angle labels\n\n  }, {\n    key: \"setAngles\",\n    value: function setAngles() {\n      var _this5 = this;\n\n      this.elements.angles.forEach(function (angleElement) {\n        var angleName = angleElement.getAttribute('data-immanuel-angle');\n        var angle = _this5.chartData.angles[angleName].chartAngle - _this5.offsetAngle;\n\n        var _Utils$findRelativePo = Utils.findRelativePoint(_this5.elements.angleTrack, angle),\n            _Utils$findRelativePo2 = _slicedToArray(_Utils$findRelativePo, 2),\n            x = _Utils$findRelativePo2[0],\n            y = _Utils$findRelativePo2[1];\n\n        x = Math.round(x - angleElement.offsetWidth / 2);\n        y = Math.round(y - angleElement.offsetHeight / 2);\n        Object.assign(angleElement.style, {\n          position: 'absolute',\n          left: x + 'px',\n          top: y + 'px'\n        });\n      });\n    } // Position the sign elements if they exist.\n\n  }, {\n    key: \"setSigns\",\n    value: function setSigns() {\n      var _this6 = this;\n\n      var signAngle = 15 - this.offsetAngle;\n      this.elements.signs.forEach(function (signElement) {\n        var _Utils$findRelativePo3 = Utils.findRelativePoint(_this6.elements.signTrack, signAngle),\n            _Utils$findRelativePo4 = _slicedToArray(_Utils$findRelativePo3, 2),\n            x = _Utils$findRelativePo4[0],\n            y = _Utils$findRelativePo4[1];\n\n        x = Math.round(x - signElement.offsetWidth / 2);\n        y = Math.round(y - signElement.offsetHeight / 2);\n        Object.assign(signElement.style, {\n          position: 'absolute',\n          left: x + 'px',\n          top: y + 'px'\n        });\n\n        if (_this6.options.rotateSigns) {\n          var rotationAngle = signAngle * -1 + 90;\n          signElement.style.transform = \"rotate(\".concat(rotationAngle, \"deg)\");\n        }\n\n        signAngle += 30;\n      });\n    } // Set up the planets & their angles.\n\n  }, {\n    key: \"setPlanets\",\n    value: function setPlanets() {\n      this.resetPlanetAngles();\n      this.resolvePlanetCollisions();\n      this.positionPlanets();\n\n      if (this.elements.angleTextTrack) {\n        this.setPlanetAngleText();\n      }\n    } // Reset planet angles to their potentially colliding defaults for resize.\n\n  }, {\n    key: \"resetPlanetAngles\",\n    value: function resetPlanetAngles() {\n      Object.values(this.planets).forEach(function (planet) {\n        planet.displayAngle = planet.chartAngle;\n      });\n    } // Space out planets when they collide with each other.\n\n  }, {\n    key: \"resolvePlanetCollisions\",\n    value: function resolvePlanetCollisions() {\n      var _this7 = this;\n\n      // Form groups of colliding planets\n      var collisionGroups = [];\n      this.elements.planets.forEach(function (planetElement) {\n        var planetName = planetElement.getAttribute('data-immanuel-planet');\n        var planet = _this7.planets[planetName]; // For each planet, check whether it's colliding with another planet\n\n        _this7.elements.planets.forEach(function (testPlanetElement) {\n          var testPlanetName = testPlanetElement.getAttribute('data-immanuel-planet');\n\n          if (planetName === testPlanetName) {\n            return;\n          } // Test for collision here by checking for the gap between their centres being less than their combined radii\n\n\n          var testPlanet = _this7.planets[testPlanetName];\n          var planetRadius = Math.max(planetElement.offsetWidth, planetElement.offsetHeight) / 2;\n          var testPlanetRadius = Math.max(testPlanetElement.offsetWidth, testPlanetElement.offsetHeight) / 2;\n          var trackDiameter = _this7.elements.planetTrack.offsetWidth;\n          var degreesBetween = Math.abs(planet.displayAngle - testPlanet.displayAngle);\n          var gapBetween = Math.abs(Math.sin(degreesBetween * (Math.PI / 360)) * trackDiameter); // If we have a collision, add it to a collision group, which is an array\n          // containing all the planets involved in this collision (eg. a stellium)\n\n          if (gapBetween < planetRadius + testPlanetRadius) {\n            collisionGroups.forEach(function (collisionGroup) {\n              if (collisionGroup.includes(planet) || collisionGroup.includes(testPlanet)) {\n                if (!collisionGroup.includes(planet)) {\n                  collisionGroup.push(planet);\n                }\n\n                if (!collisionGroup.includes(testPlanet)) {\n                  collisionGroup.push(testPlanet);\n                }\n\n                return;\n              }\n            });\n            collisionGroups.push([planet, testPlanet]);\n          }\n        });\n      }); // Now we loop over all collision groups and space them out evenly before recursing to recalculate\n      // If the angle between planets > 270 degrees we assume one of them is crossing the zero point\n\n      if (collisionGroups.length > 0) {\n        collisionGroups.forEach(function (collisionGroup) {\n          collisionGroup.sort(function (a, b) {\n            return Math.abs(a.displayAngle - b.displayAngle) > 270 ? b.displayAngle - a.displayAngle : a.displayAngle - b.displayAngle;\n          });\n          collisionGroup[0].displayAngle -= 0.1;\n          collisionGroup[collisionGroup.length - 1].displayAngle += 0.1;\n        });\n        this.resolvePlanetCollisions();\n      }\n    } // Position the planet elements.\n\n  }, {\n    key: \"positionPlanets\",\n    value: function positionPlanets() {\n      var _this8 = this;\n\n      this.elements.planets.forEach(function (planetElement) {\n        var planetName = planetElement.getAttribute('data-immanuel-planet');\n        var planet = _this8.planets[planetName];\n        var angle = planet.displayAngle - _this8.offsetAngle;\n        var movement = planet.movement.toLowerCase(); // Add classes for planet movement & sign\n\n        planetElement.classList.add('immanuel__planet-movement', \"planet-movement--\".concat(movement));\n        planetElement.classList.add('immanuel__planet-sign', \"planet-sign--\".concat(planet.sign.toLowerCase())); // Position the planet\n\n        var _Utils$findRelativePo5 = Utils.findRelativePoint(_this8.elements.planetTrack, angle),\n            _Utils$findRelativePo6 = _slicedToArray(_Utils$findRelativePo5, 2),\n            x = _Utils$findRelativePo6[0],\n            y = _Utils$findRelativePo6[1];\n\n        x = Math.round(x - planetElement.offsetWidth / 2);\n        y = Math.round(y - planetElement.offsetHeight / 2);\n        Object.assign(planetElement.style, {\n          position: 'absolute',\n          left: x + 'px',\n          top: y + 'px'\n        });\n      });\n    } // Add angle text for each planet.\n\n  }, {\n    key: \"setPlanetAngleText\",\n    value: function setPlanetAngleText() {\n      for (var _i2 = 0, _Object$entries = Object.entries(this.planets); _i2 < _Object$entries.length; _i2++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n            planetName = _Object$entries$_i[0],\n            planet = _Object$entries$_i[1];\n\n        var angle = planet.displayAngle - this.offsetAngle;\n        var angleTextElement = this.elements.angleText[planetName]; // Add angle text & reset any previous rotation\n\n        angleTextElement.style.transform = 'none';\n        angleTextElement.innerHTML = Utils.formatAngleString(planet.formattedSignAngle, this.options.angleFormat); // Rotate & offset position if requested\n\n        if (this.options.rotateAngleText) {\n          var leftOffset = angleTextElement.offsetWidth / 2;\n          var topOffset = angleTextElement.offsetHeight / 2;\n          var rotationAngle = angle * -1;\n\n          if (angle > 90 && angle < 270) {\n            rotationAngle -= 180;\n          }\n\n          angleTextElement.style.transform = \"rotate(\".concat(rotationAngle, \"deg)\");\n        } else {\n          var _Utils$findRelativePo7 = Utils.findRelativePoint(this.elements.chart, angle),\n              _Utils$findRelativePo8 = _slicedToArray(_Utils$findRelativePo7, 2),\n              relX = _Utils$findRelativePo8[0],\n              relY = _Utils$findRelativePo8[1];\n\n          var leftOffset = angleTextElement.offsetWidth * (relX / this.elements.chart.offsetWidth);\n          var topOffset = angleTextElement.offsetHeight * (relY / this.elements.chart.offsetHeight);\n        } // Set position based on calculated offsets\n\n\n        var _Utils$findGlobalPoin = Utils.findGlobalPoint(this.elements.chart, this.elements.angleTextTrack, angle),\n            _Utils$findGlobalPoin2 = _slicedToArray(_Utils$findGlobalPoin, 2),\n            absX = _Utils$findGlobalPoin2[0],\n            absY = _Utils$findGlobalPoin2[1];\n\n        absX = Math.round(absX - leftOffset);\n        absY = Math.round(absY - topOffset);\n        Object.assign(angleTextElement.style, {\n          left: absX + 'px',\n          top: absY + 'px'\n        });\n      }\n    } // Add the markers for each planet's original pre-collision-check placement.\n\n  }, {\n    key: \"setPlanetAngleMarkers\",\n    value: function setPlanetAngleMarkers() {\n      for (var _i3 = 0, _Object$entries2 = Object.entries(this.planets); _i3 < _Object$entries2.length; _i3++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),\n            planetName = _Object$entries2$_i[0],\n            planet = _Object$entries2$_i[1];\n\n        var angle = planet.chartAngle - this.offsetAngle;\n        var planetClassName = planetName.replace(' ', '-');\n\n        var _Utils$findGlobalPoin3 = Utils.findGlobalPoint(this.elements.chart, this.elements.angleMarkersEndBoundary, angle),\n            _Utils$findGlobalPoin4 = _slicedToArray(_Utils$findGlobalPoin3, 2),\n            x1 = _Utils$findGlobalPoin4[0],\n            y1 = _Utils$findGlobalPoin4[1];\n\n        var _Utils$findGlobalPoin5 = Utils.findGlobalPoint(this.elements.chart, this.elements.angleMarkersStartBoundary, angle),\n            _Utils$findGlobalPoin6 = _slicedToArray(_Utils$findGlobalPoin5, 2),\n            x2 = _Utils$findGlobalPoin6[0],\n            y2 = _Utils$findGlobalPoin6[1];\n\n        this.drawLine(x1, y1, x2, y2, 'immanuel__angle-marker', \"angle-marker--\".concat(planetClassName));\n      }\n    } // Add lines from each angle marker to the planet's actual position.\n\n  }, {\n    key: \"setPlanetAnglePointers\",\n    value: function setPlanetAnglePointers() {\n      var _this9 = this;\n\n      this.elements.planets.forEach(function (planetElement) {\n        var planetName = planetElement.getAttribute('data-immanuel-planet');\n        var planet = _this9.planets[planetName];\n        var markerAngle = planet.chartAngle - _this9.offsetAngle;\n        var planetAngle = planet.displayAngle - _this9.offsetAngle;\n        var planetDiameter = Math.max(planetElement.offsetWidth, planetElement.offsetHeight);\n        var planetClassName = planetName.replace(' ', '-');\n\n        var _Utils$findGlobalPoin7 = Utils.findGlobalPoint(_this9.elements.chart, _this9.elements.angleMarkersStartBoundary, markerAngle),\n            _Utils$findGlobalPoin8 = _slicedToArray(_Utils$findGlobalPoin7, 2),\n            x1 = _Utils$findGlobalPoin8[0],\n            y1 = _Utils$findGlobalPoin8[1];\n\n        var _Utils$findGlobalPoin9 = Utils.findGlobalPoint(_this9.elements.chart, _this9.elements.planetTrack, planetAngle, planetDiameter + 10),\n            _Utils$findGlobalPoin10 = _slicedToArray(_Utils$findGlobalPoin9, 2),\n            x2 = _Utils$findGlobalPoin10[0],\n            y2 = _Utils$findGlobalPoin10[1];\n\n        var _Utils$findGlobalPoin11 = Utils.findGlobalPoint(_this9.elements.chart, _this9.elements.planetTrack, planetAngle, planetDiameter),\n            _Utils$findGlobalPoin12 = _slicedToArray(_Utils$findGlobalPoin11, 2),\n            x3 = _Utils$findGlobalPoin12[0],\n            y3 = _Utils$findGlobalPoin12[1];\n\n        _this9.drawLine(x1, y1, x2, y2, 'immanuel__angle-pointer', \"angle-pointer--\".concat(planetClassName));\n\n        _this9.drawLine(x2, y2, x3, y3, 'immanuel__angle-pointer', \"angle-pointer--\".concat(planetClassName));\n      });\n    } // Draw the house cusp lines.\n\n  }, {\n    key: \"setHouses\",\n    value: function setHouses() {\n      for (var _i4 = 0, _Object$entries3 = Object.entries(this.chartData.houses); _i4 < _Object$entries3.length; _i4++) {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i4], 2),\n            houseNumber = _Object$entries3$_i[0],\n            house = _Object$entries3$_i[1];\n\n        var angle = house.chartAngle - this.offsetAngle;\n\n        var _Utils$findGlobalPoin13 = Utils.findGlobalPoint(this.elements.chart, this.elements.houseEndBoundary, angle),\n            _Utils$findGlobalPoin14 = _slicedToArray(_Utils$findGlobalPoin13, 2),\n            x1 = _Utils$findGlobalPoin14[0],\n            y1 = _Utils$findGlobalPoin14[1];\n\n        var _Utils$findGlobalPoin15 = Utils.findGlobalPoint(this.elements.chart, this.elements.houseStartBoundary, angle),\n            _Utils$findGlobalPoin16 = _slicedToArray(_Utils$findGlobalPoin15, 2),\n            x2 = _Utils$findGlobalPoin16[0],\n            y2 = _Utils$findGlobalPoin16[1];\n\n        this.drawLine(x1, y1, x2, y2, 'immanuel__house-line', \"house-line--\".concat(houseNumber));\n      }\n    } // Add house numbers\n\n  }, {\n    key: \"setHouseNumbers\",\n    value: function setHouseNumbers() {\n      for (var _i5 = 0, _Object$entries4 = Object.entries(this.chartData.houses); _i5 < _Object$entries4.length; _i5++) {\n        var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i5], 2),\n            houseNumber = _Object$entries4$_i[0],\n            house = _Object$entries4$_i[1];\n\n        var angle = house.chartAngle - this.offsetAngle;\n        var nextHouseNumber = houseNumber == 12 ? 1 : parseInt(houseNumber) + 1;\n        var nextHouseAngle = this.chartData.houses[nextHouseNumber].chartAngle;\n        var houseWidthAngle = (nextHouseAngle < angle ? nextHouseAngle + 360 : nextHouseAngle) - angle;\n        var midpointAngle = angle + (houseWidthAngle - this.offsetAngle) / 2;\n        var houseNumberElement = this.elements.houseNumbers[houseNumber];\n\n        var _Utils$findGlobalPoin17 = Utils.findGlobalPoint(this.elements.chart, this.elements.houseNumberTrack, midpointAngle),\n            _Utils$findGlobalPoin18 = _slicedToArray(_Utils$findGlobalPoin17, 2),\n            x = _Utils$findGlobalPoin18[0],\n            y = _Utils$findGlobalPoin18[1];\n\n        x = Math.round(x - houseNumberElement.offsetWidth / 2);\n        y = Math.round(y - houseNumberElement.offsetHeight / 2);\n        Object.assign(houseNumberElement.style, {\n          left: x + 'px',\n          top: y + 'px'\n        });\n\n        if (this.options.rotateHouseNumbers) {\n          var rotationAngle = midpointAngle * -1 + 90;\n          houseNumberElement.style.transform = \"rotate(\".concat(rotationAngle, \"deg)\");\n        }\n      }\n    } // Draw aspect lines in the order the types are laid out in this.options.aspectOrder.\n\n  }, {\n    key: \"setAspects\",\n    value: function setAspects() {\n      var _this10 = this;\n\n      var aspectsToDraw = {};\n      this.options.aspectOrder.reverse().forEach(function (aspectType) {\n        return aspectsToDraw[aspectType] = [];\n      });\n\n      for (var _i6 = 0, _Object$entries5 = Object.entries(this.planets); _i6 < _Object$entries5.length; _i6++) {\n        var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i6], 2),\n            planetName = _Object$entries5$_i[0],\n            planet = _Object$entries5$_i[1];\n\n        var _loop = function _loop() {\n          var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i7], 2),\n              aspectedPlanetName = _Object$entries6$_i[0],\n              aspect = _Object$entries6$_i[1];\n\n          var _sort = [planetName, aspectedPlanetName].sort(),\n              _sort2 = _slicedToArray(_sort, 2),\n              startPlanetName = _sort2[0],\n              endPlanetName = _sort2[1];\n\n          var aspectType = aspect.type.toLowerCase(); // If this is an planet we don't want to aspect, or this is an aspect we don't want, skip it\n\n          if (!_this10.aspectedPlanets.includes(startPlanetName) || !_this10.aspectedPlanets.includes(endPlanetName) || !_this10.options.aspectOrder.includes(aspectType)) {\n            return \"continue\";\n          }\n\n          var aspectToDraw = {\n            startAngle: _this10.planets[startPlanetName].chartAngle - _this10.offsetAngle,\n            endAngle: _this10.planets[endPlanetName].chartAngle - _this10.offsetAngle\n          }; // Avoid duplicates\n\n          if (aspectsToDraw[aspectType].some(function (aspectData) {\n            return JSON.stringify(aspectData) === JSON.stringify(aspectToDraw);\n          })) {\n            return \"continue\";\n          }\n\n          aspectsToDraw[aspectType].push(aspectToDraw);\n        };\n\n        for (var _i7 = 0, _Object$entries6 = Object.entries(planet.aspects); _i7 < _Object$entries6.length; _i7++) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } // Now we have our definitive list, draw them\n\n\n      var _loop2 = function _loop2() {\n        var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i8], 2),\n            aspectType = _Object$entries7$_i[0],\n            aspectList = _Object$entries7$_i[1];\n\n        aspectList.forEach(function (aspect) {\n          var _Utils$findGlobalPoin19 = Utils.findGlobalPoint(_this10.elements.chart, _this10.elements.aspectEndBoundary, aspect.startAngle),\n              _Utils$findGlobalPoin20 = _slicedToArray(_Utils$findGlobalPoin19, 2),\n              x1 = _Utils$findGlobalPoin20[0],\n              y1 = _Utils$findGlobalPoin20[1];\n\n          var _Utils$findGlobalPoin21 = Utils.findGlobalPoint(_this10.elements.chart, _this10.elements.aspectEndBoundary, aspect.endAngle),\n              _Utils$findGlobalPoin22 = _slicedToArray(_Utils$findGlobalPoin21, 2),\n              x2 = _Utils$findGlobalPoin22[0],\n              y2 = _Utils$findGlobalPoin22[1];\n\n          _this10.drawLine(x1, y1, x2, y2, 'immanuel__aspect-line', \"aspect-line--\".concat(aspectType));\n        });\n      };\n\n      for (var _i8 = 0, _Object$entries7 = Object.entries(aspectsToDraw); _i8 < _Object$entries7.length; _i8++) {\n        _loop2();\n      }\n    } // Draw a line in the chart based on coordinates, and add classes.\n\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(x1, y1, x2, y2) {\n      var _line$classList;\n\n      var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n\n      for (var _len = arguments.length, classList = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n        classList[_key - 4] = arguments[_key];\n      }\n\n      (_line$classList = line.classList).add.apply(_line$classList, classList);\n\n      line.setAttributeNS(null, 'x1', x1);\n      line.setAttributeNS(null, 'y1', y1);\n      line.setAttributeNS(null, 'x2', x2);\n      line.setAttributeNS(null, 'y2', y2);\n      this.elements.chartSvg.appendChild(line);\n      this.elements.chartLines.push(line);\n    }\n  }]);\n\n  return Chart;\n}()));\n\n\n// CONCATENATED MODULE: ./src/immanuel.js\nfunction immanuel_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction immanuel_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { immanuel_ownKeys(Object(source), true).forEach(function (key) { immanuel_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { immanuel_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction immanuel_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction immanuel_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction immanuel_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction immanuel_createClass(Constructor, protoProps, staticProps) { if (protoProps) immanuel_defineProperties(Constructor.prototype, protoProps); if (staticProps) immanuel_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\nvar Immanuel = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  function Immanuel(selector) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    immanuel_classCallCheck(this, Immanuel);\n\n    this.elements = Elements.create(selector);\n    this.options = Options.create(options);\n  }\n\n  immanuel_createClass(Immanuel, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = immanuel_objectSpread(immanuel_objectSpread({}, this.options), options);\n    }\n  }, {\n    key: \"displayChart\",\n    value: function displayChart(chartData) {\n      Chart.create(this.elements, this.options, chartData).display();\n    }\n  }]);\n\n  return Immanuel;\n}()));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///676\n")})();